from asyncio import tasks
from turtle import rt
from unicodedata import category
import discord
from operator import index
from discord.ext import commands
from discord_components import DiscordComponents, ComponentsBot, Button, Select
from discord_components import SelectOption as Sel
from discord.utils import get
from email.errors import InvalidMultipartContentTransferEncodingDefect
import asyncio
import json
from discord_components import ComponentsBot
import interactions
from interactions import TextInput, Modal, TextStyleType, SelectMenu, SelectOption, Option
from youtube_dl import YoutubeDL
import os
import discord
from discord_components import DiscordComponents, ComponentsBot, Button, Select, SelectOption, Interaction
import interactions
from interactions import Modal, TextInput
import json
import asyncio
from discord.ext import commands
from BD import bdmpy, bdpy
from BTSET import embpy
rtask = None
class Roomedit(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # @commands.command()
    # @commands.has_permissions(administrator=True)
    # async def room(self, ctx):
    #     with open('users.json', 'r') as file:
    #         dataServerID = json.load(file)
    #         COLOR = int(dataServerID[str(ctx.author.guild.id)]['COLOR'], 16)
    #         ErCOLOR = int(dataServerID[str(ctx.author.guild.id)]['ErCOLOR'], 16)
    #         SelfRoom = int(dataServerID[str(ctx.author.guild.id)]['selfRoom'])

    #     emb = discord.Embed(title='***‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏***',
    #                         description='üëë - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã \n\
    #                         üóí - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å/–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ \n\
    #                         üë• - –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ \n\
    #                         üîí - –∑–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É \n\
    #                         ‚úèÔ∏è - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã \n\
    #                         üëÅ‚Äçüó® - —Å–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É \n\
    #                         üö™ - –≤—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã \n\
    #                         üéô - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å/–≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å',
    #                         color = COLOR)
    #     await ctx.send(embed=emb,
    #     components = [
    #         [
    #             Button(emoji = 'üëë', style=1),
    #             Button(emoji = 'üóí', style=1),
    #             Button(emoji = 'üë•', style=1),
    #             Button(emoji = 'üîí', style=1)
    #         ],
    #         [
    #             Button(emoji = '‚úèÔ∏è', style=1),
    #             Button(emoji = 'üëÅ‚Äçüó®', style=1),
    #             Button(emoji = 'üö™', style=1),
    #             Button(emoji = 'üéô', style=1)
    #         ]
    #     ]
    # )


    @commands.Cog.listener('on_voice_state_update')
    async def roomedit_move_on_voice_state_update(self, member, defore, after):
        try:
            with open('users.json', 'r') as file:
                dataServerID = json.load(file)
            role = bdmpy(mr=member)['FirstRole']
            try:
                SelfRooms = dataServerID[str(defore.channel.guild.id)]['Selfrooms']
                SelfRoom = int(dataServerID[str(defore.channel.guild.id)]['selfRoom']["vc"])
            except:
                SelfRooms = dataServerID[str(after.channel.guild.id)]['Selfrooms']
                SelfRoom = int(dataServerID[str(after.channel.guild.id)]['selfRoom']["vc"])
            try:
                if after.channel.id == SelfRoom:
                    chlen = await after.channel.guild.create_voice_channel(name=f'{member.name}', category=[i for i in member.guild.categories if i.id == int(dataServerID[str(after.channel.guild.id)]['selfRoom']["ctp"])][0])
                    await member.move_to(chlen)
                    ow1 = discord.PermissionOverwrite()
                    ow1.connect = True
                    ow1.view_channel = True
                    if role in member.guild.roles:
                        TARGET=role
                    else:
                        TARGET = member.guild.roles[0]
                    await member.voice.channel.set_permissions(target=TARGET, overwrite=ow1)
                    dataServerID[str(member.guild.id)]['Selfrooms'].update({
                        str(chlen.id): str(member.id)})
                with open('users.json', 'w') as file:
                    json.dump(dataServerID, file, indent=4)
            except:
                if defore.channel.id == SelfRoom:
                    chlen = await after.channel.guild.create_voice_channel(name=f'{member.name}', category=[i for i in member.guild.categories if i.id == int(dataServerID[str(after.channel.guild.id)]['selfRoom']["ctp"])][0])
                    await member.move_to(chlen)
                    ow1 = discord.PermissionOverwrite()
                    ow1.connect = True
                    ow1.view_channel = True
                    if role in member.guild.roles:
                        TARGET=role
                    else:
                        TARGET = member.guild.roles[0]
                    await member.voice.channel.set_permissions(target=TARGET, overwrite=ow1)
                    dataServerID[str(member.guild.id)]['Selfrooms'].update({
                        str(chlen.id): str(member.id)})
                with open('users.json', 'w') as file:
                    json.dump(dataServerID, file, indent=4)

            if defore.channel.name in [i.name for i in defore.channel.guild.voice_channels if i.id in [int(k) for k in SelfRooms.keys()]]:
                if not (defore.channel.members):
                    await defore.channel.delete()
                    dataServerID[str(member.guild.id)]['Selfrooms'].pop(str(defore.channel.id))
                with open('users.json', 'w') as file:
                    json.dump(dataServerID, file, indent=4)
        except:
            pass

    async def roomedit_on_button_click(self, interaction):
        if str(interaction.author.id) == bdpy(ctx=interaction)['Selfrooms'][str(interaction.author.voice.channel.id)]:
            role = bdmpy(mr=interaction.author)['FirstRole']
            if role in interaction.guild.roles:
                TARGET=role
            else:
                TARGET = interaction.guild.roles[0]
            async def write():
                ow2 = discord.PermissionOverwrite()            
                if interaction.channel.overwrites_for(TARGET).send_messages:
                    ow2.send_messages = False
                else:
                    ow2.send_messages = True
                await interaction.channel.set_permissions(target=TARGET, overwrite=ow2)
            with open('users.json', 'r') as file:
                dataServerID = json.load(file)
                ownRoom = int(dataServerID[str(interaction.guild.id)]['Selfrooms'][str(interaction.author.voice.channel.id)])

            if str(interaction.component.emoji) == 'üëë': #—Ç—É—Ç —Å–µ–ª–µ–∫—Ç
                await interaction.send(embed=embpy(ctx=interaction, comp='n', des='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @—É—á–∞—Å—Ç–Ω–∏–∫ '))
                await write()
                def check(msg: discord.Message):
                    return msg.author == interaction.author and msg.channel == interaction.channel and msg.author == interaction.guild.get_member(ownRoom)

                ms = await self.bot.wait_for(event='message', check=check)
                await write()
                dataServerID[str(interaction.guild.id)]['Selfrooms'][str(interaction.author.voice.channel.id)] = [str(i.id) for i in ms.author.voice.channel.members if ms.content == i.mention][0]
                with open('users.json', 'w') as file:
                    json.dump(dataServerID, file, indent=4)
                await ms.delete()

            elif str(interaction.component.emoji) == 'üóí':
                await interaction.send(embed=embpy(ctx=interaction, comp='n', des='–ù–∞–ø–∏—à–∏—Ç–µ @—É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–æ –≤—Ö–æ–¥–∏—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É'))
                await write()
                def check(msg: discord.Message):
                    return msg.author == interaction.author and msg.channel == interaction.channel and msg.author == interaction.guild.get_member(ownRoom)

                ms = await self.bot.wait_for(event='message', check=check)
                await write()
                pr = discord.PermissionOverwrite()
                if [i for i in ms.guild.members if ms.content == i.mention][0] in interaction.guild.members:
                    if [i for i in ms.guild.members if ms.content == i.mention][0] in ms.author.voice.channel.members:
                        if interaction.author.voice.channel.permissions_for([i for i in ms.guild.members if ms.content == i.mention][0]).connect:
                            pr.connect = False
                            await interaction.send(embed=embpy(ctx=interaction, comp='s', des=f'–£—á–∞—Å—Ç–Ω–∏–∫—É {ms.content} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ!'))
                            [await i.move_to(None) for i in ms.author.voice.channel.members if ms.content == i.mention]
                        else:
                            pr.connect = True
                            await interaction.send(embed=embpy(ctx=interaction, comp='s', des=f'–£—á–∞—Å—Ç–Ω–∏–∫—É {ms.content} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ!'))
                        await interaction.author.voice.channel.set_permissions(target=[i for i in ms.guild.members if ms.content == i.mention][0], overwrite=pr)
                        await ms.delete()
                    else:
                        if interaction.author.voice.channel.permissions_for([i for i in ms.guild.members if ms.content == i.mention][0]).connect:
                            pr.connect = False
                            await interaction.send(embed=embpy(ctx=interaction, comp='s', des=f'–£—á–∞—Å—Ç–Ω–∏–∫—É {ms.content} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ!'))
                        else:
                            pr.connect = True
                            await interaction.send(embed=embpy(ctx=interaction, comp='s', des=f'–£—á–∞—Å—Ç–Ω–∏–∫—É {ms.content} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ!'))
                        await interaction.author.voice.channel.set_permissions(target=[i for i in ms.guild.members if ms.content == i.mention][0], overwrite=pr)
                        await ms.delete()
                else:
                    embpy(ctx=interaction, comp='e', des=f'–£—á–∞—Å—Ç–Ω–∏–∫–∞ {ms.content} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                    await ms.delete()


            elif str(interaction.component.emoji) == 'üë•':
                await interaction.send(embed = embpy(ctx=interaction, comp='n', des='–Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'))
                await write()
                def check(msg: discord.Message):
                    return msg.author == interaction.author and msg.channel == interaction.channel and msg.author == interaction.guild.get_member(ownRoom)

                ms = await self.bot.wait_for(event='message', check=check)
                await write()
                try:
                    await ms.author.voice.channel.edit(user_limit=int(ms.content))
                    await interaction.send(embed = embpy(ctx=interaction, comp='s', des=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –Ω–∞ {ms.content}'))
                except TypeError:
                    await interaction.send(embed = embpy(ctx=interaction, comp='e', des='–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99'))
                await ms.delete()

            elif str(interaction.component.emoji) == 'üîí':
                fr = TARGET
                pr = interaction.author.voice.channel.overwrites_for(fr)
                if interaction.author.voice.channel.overwrites_for(fr).connect:
                    pr.connect = False
                    await interaction.send(embed = embpy(ctx=interaction, comp='s', des=f'–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!'))
                else:
                    pr.connect = True
                    await interaction.send(embed = embpy(ctx=interaction, comp='s', des=f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–Ω—è—Ç–æ!'))

                await interaction.author.voice.channel.set_permissions(target=fr, overwrite=pr)

            elif str(interaction.component.emoji) == '‚úèÔ∏è':
                botmes = await interaction.send(embed = embpy(ctx=interaction, comp='n', des='–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã'))
                await write()
                def check(msg: discord.Message):
                    return msg.author == interaction.author and msg.channel == interaction.channel and msg.author == interaction.guild.get_member(ownRoom)

                ms = await self.bot.wait_for(event='message', check=check)
                await write()
                await ms.author.voice.channel.edit(name=f'{ms.content}')
                await botmes.edit('123')
                await ms.delete()


            elif str(interaction.component.emoji) == 'üëÅ‚Äçüó®':
                fr = TARGET
                pr = interaction.author.voice.channel.overwrites_for(fr)
                
                if interaction.author.voice.channel.overwrites_for(fr).view_channel:
                    pr.view_channel = False
                    await interaction.send(embed = embpy(ctx=interaction, comp='s', des=f'–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–æ–º–Ω–∞—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!'))
                else:
                    pr.view_channel = True
                    await interaction.send(embed = embpy(ctx=interaction, comp='s', des=f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–æ–º–Ω–∞—Ç—ã —Å–Ω—è—Ç–æ!'))

                await interaction.author.voice.channel.set_permissions(target=fr, overwrite=pr)

            elif str(interaction.component.emoji) == 'üö™': #—Å–µ–ª–µ–∫—Ç
                await interaction.send(embed = embpy(ctx=interaction, comp='s', des='–Ω–∞–ø–∏—à–∏—Ç–µ @—É—á–∞—Å—Ç–Ω–∏–∫  –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≥–Ω–∞—Ç—å'))
                await write()
                def check(msg: discord.Message):
                    return msg.author == interaction.author and msg.channel == interaction.channel and msg.author == interaction.guild.get_member(ownRoom)

                ms = await self.bot.wait_for(event='message', check=check)
                await write()
                [await i.move_to(None) for i in ms.author.voice.channel.members if ms.content == i.mention]
                await ms.delete()


            elif str(interaction.component.emoji) == 'üéô':  #—Å–µ–ª–µ–∫—Ç
                await interaction.send(embed = embpy(ctx=interaction, comp='n', des='–Ω–∞–ø–∏—à–∏—Ç–µ @—É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å'))
                await write()
                def check(msg: discord.Message):
                    return msg.author == interaction.author and msg.channel == interaction.channel and msg.author == interaction.guild.get_member(ownRoom)

                ms = await self.bot.wait_for(event='message', check=check)
                await write()
                pr = discord.PermissionOverwrite()
                
                if interaction.author.voice.channel.permissions_for([i for i in ms.author.voice.channel.members if ms.content == i.mention][0]).speak:
                    
                    member: discord.Member = [i for i in ms.author.voice.channel.members if ms.content == i.mention][0]
                    if member.voice.mute == False:
                        pr.speak = False
                        await member.edit(mute = True)
                        await ms.author.voice.channel.set_permissions(target=member, overwrite=pr)
                    else:
                        await interaction.send(embed = embpy(ctx=interaction, comp='e', des=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} —É–∂–µ –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!'))
                else:
                    pr.speak = True
                    member: discord.Member = [i for i in ms.author.voice.channel.members if ms.content == i.mention][0]
                    await member.edit(mute = False)
                    
                    await ms.author.voice.channel.set_permissions(target=member, overwrite=pr)
                    
                await interaction.author.voice.channel.set_permissions(
                    target=[i for i in ms.author.voice.channel.members if ms.content == i.mention][0], overwrite=pr)
                await ms.delete()
        else:
            await interaction.send(embed=embpy(ctx=interaction, comp='e', des='–í—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã!'))

    @commands.Cog.listener('on_button_click')
    async def roomedit_start(self, interaction):
        global rtask
        if rtask:
            rtask.cancel()
        rtask = asyncio.create_task(Roomedit(bot=self.bot).roomedit_on_button_click(interaction))
        
    @commands.Cog.listener('on_voice_state_update')
    async def roomedit_mute_on_voice_state_update(self, member, before, after):
        Selfrooms = bdmpy(mr=member)['Selfrooms']
        try:
            if (not(after) and not(before.channel.permissions_for(member).speak) and str(before.channel.id) in [k for k in Selfrooms.keys()]) or (after.channel != before.channel and not(before.channel.permissions_for(member).speak) and str(before.channel.id) in [k for k in Selfrooms.keys()]):
                    await member.edit(mute = False)
        except:
            pass
def setup(bot):
    bot.add_cog(Roomedit(bot))