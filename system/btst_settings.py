import discord
from discord.ext import commands
from email.errors import InvalidMultipartContentTransferEncodingDefect
import json
from BTSET import BD


class CheckMesBTST:
    def __init__(self, interaction):
        self.interaction: discord_components.Interaction = interaction

    def check(self, mes: discord.Message):
        return self.interaction.author == mes.author and self.interaction.channel == mes.channel


class SetForBTST():
    def __init__(self, bot, interaction, old_emb, arg):
        self.bot = bot
        self.interaction: discord_components.Interaction = interaction
        self.old_emb = old_emb
        self.arg = arg
        self.check = CheckMesBTST(interaction)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)

        self.data = data
        self.roles = data[str(interaction.guild.id)]['JoinRoles']
        self.COLOR = int(data[str(interaction.guild.id)]['COLOR'], 16)
        self.Classes = data[str(interaction.guild.id)]['ROLES']
        self.chlens = []
        self.serverRoles = []


        for i in range(0, len(interaction.guild.roles),
                       24):
            self.serverRoles.append(interaction.guild.roles[
                               i:i + 24])

        for i in range(0, len([chlen for chlen in interaction.guild.text_channels]),
                       24):
            self.chlens.append([chlen for chlen in interaction.guild.text_channels][
                          i:i + 24])


    async def music(self):
        if [i for i in self.interaction.guild.categories if i.name == 'music']:
            for category in self.interaction.guild.categories:
                [await chnl.delete() for chnl in category.channels if category.name == 'music']
            [await i.delete() for i in self.interaction.guild.categories if i.name == 'music']
        else:

            with open('music.json', 'r') as file:
                data_mus: dict = json.load(file)
            if not (str(self.interaction.guild.id) in [i for i in data_mus.keys()]):
                data_mus.update(
                    {
                        self.interaction.guild.id: {
                            'songs': [],
                            'pl_id': None,
                            'chl_id': None
                        }
                    }
                )

            with open('music.json', 'w') as file:
                json.dump(data_mus, file, indent=4)

            ctg = await self.interaction.guild.create_category(name='music')
            txt_cnlen = await ctg.create_text_channel(name='–≤–µ–ª–∏–∫–∏–π –¥–æ–Ω —è–≥–æ–Ω')
            vc_clen = await ctg.create_voice_channel(name='music')
            embd = discord.Embed(
                title='***                               wave player***',
                description=f'=================================',
                colour=0x00FFFF
            )
            embd.add_field(name='—Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:', value='–Ω–∏—á–µ–≥–æ')

            comp = [
                [
                    Button(emoji='‚óÄ', style=2),
                    Button(emoji='‚èØ', style=2),
                    Button(emoji='‚ñ∂', style=2),
                    Button(emoji='üîÄ', style=2)
                ],
                [
                    Button(emoji='‚ûï', style=2),
                    Button(emoji='üîä', style=2),
                    Button(emoji='üîà', style=2),
                    Button(emoji='üîá', style=2)
                ]
            ]

            msc_player = await txt_cnlen.send(embed=embd, components=comp)

            await vc_clen.connect()

            with open('music.json', 'r') as file:
                data_mus = json.load(file)
                data_mus[str(self.interaction.guild.id)]['pl_id'] = msc_player.id
                data_mus[str(self.interaction.guild.id)]['chl_id'] = txt_cnlen.id
            with open('music.json', 'w') as file:
                json.dump(data_mus, file, indent=4)

    async def role_set(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb,
               components=[
                   Select(
                       placeholder='–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏',
                       max_values=len(self.data[str(self.interaction.guild.id)]['ROLES']),
                       min_values=1,
                       options=[SelectOption(label=str(i), value=str(i)) for i in
                                [k for k in self.Classes.keys()]]
                   ),
                   [
                       Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                       Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                       Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
                   ],
                   [
                       Button(label='<---'),
                       Button(label='OK'),
                       Button(label='--->')
                   ]
               ])

    async def add_roleclass(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        if not (ms.content in data[str(self.interaction.guild.id)]['ROLES']):
            with open(f'{BD}users.json', 'w') as file:
                data[str(self.interaction.guild.id)]['ROLES'].update({ms.content: [[], []]})
                json.dump(data, file, indent=4)

        await ms.delete()

    async def color_choice(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º –≤ hex', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)
        await self.interaction.edit_origin()

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        with open(f'{BD}users.json', 'w') as file:
            data[str(self.interaction.guild.id)]['COLOR'] = '0x' + ms.content
            json.dump(data, file, indent=4)
        await ms.delete()

    async def er_col_choice(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º –≤ hex', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)
        await self.interaction.edit_origin()

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        with open(f'{BD}users.json', 'w') as file:
            data[str(self.interaction.guild.id)]['ErCOLOR'] = '0x' + ms.content
            json.dump(data, file, indent=4)
        await ms.delete()

    async def admin_clen(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.old_emb.description,
            color=self.old_emb.color
        )
        emb.add_field(name='–≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                      value=f'—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {len(self.chlens)}')

        await self.interaction.message.edit(embed=emb, components=[
            Select(
                placeholder='–≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                options=[SelectOption(label=i.name, value=str(i.id)) for i in self.chlens[0]]
            ),
            [
                Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
            ],
            [
                Button(label='<---'),
                Button(label='OK'),
                Button(label='--->')
            ]
        ])
        await self.interaction.edit_origin()

    async def ncaps(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º –≤ hex', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        with open(f'{BD}users.json', 'w') as file:
            data[str(self.interaction.guild.id)]['nCaps'] = ms.content
            json.dump(data, file, indent=4)
        await ms.delete()

    async def nwarns(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å nwarns', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        with open(f'{BD}users.json', 'w') as file:
            data[str(self.interaction.guild.id)]['nWarns'] = ms.content
            json.dump(data, file, indent=4)
        await ms.delete()

    async def add_bad_word(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º –≤ hex', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        with open(f'{BD}users.json', 'w') as file:
            data[str(self.interaction.guild.id)]['BADWORDS'].append(ms.content)
            json.dump(data, file, indent=4)
        await ms.delete()

    async def remove_bod_word(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ª–æ–≤–æ–º –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ badwords', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        if ms.channel in data[str(self.interaction.guild.id)]['BADWORDS']:
            with open(f'{BD}users.json', 'w') as file:
                data[str(self.interaction.guild.id)]['BADWORDS'].pop(
                    data[str(self.interaction.guild.id)]['BADWORDS'].index(ms.content))
                json.dump(data, file, indent=4)
        else:
            await self.interaction.send('—Å–ª–æ–≤–∞ –Ω–µ—Ç')
        await ms.delete()

    async def selfrooms(self):
        ctx = [i for i in self.bot.guilds if i.id == self.interaction.guild_id][0]
        chlen_krokodila = [i for i in ctx.text_channels if i.id == self.interaction.channel_id][0]

        if self.data[str(ctx.id)]['selfRoom'] != '0':
            for category in ctx.categories:
                [await chnl.delete() for chnl in category.channels if str(category.id) == self.data[str(ctx.id)]['selfRoom']["ct"]]
            [await i.delete() for i in ctx.categories if str(i.id) == self.data[str(ctx.id)]['selfRoom']["ct"] or str(i.id) == self.data[str(ctx.id)]['selfRoom']["ctp"]]
            self.data[str(ctx.id)]['selfRoom'] = '0'
            await chlen_krokodila.send(embed=discord.Embed(title='***–£—Å–ø–µ—à–Ω–æ***',
            description='–ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç —É–¥–∞–ª—ë–Ω',
            color=self.COLOR))
        else:

            ct = await ctx.create_category(name='–°–°–ö', position=1)
            vcch = await ctx.create_voice_channel(name=f'–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É', category=ct)
            chn = await ctx.create_text_channel(name=f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–Ω–∞—Ç—ã', category=ct)
            ctp = await ctx.create_category(name='–°–≤–æ–∏ —Ä—É–º—ã', position=2)
            stb_gld: discord.Guild = self.bot.get_guild(id=981511419042361344)
            emb = discord.Embed(title='***‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏***',
                                    description=f'<:corona1:1020971032309403758> - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã \n\
                        <:notebook1:1020971040416993280> - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å/–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ \n\
                        <:meet1:1020971037741043713> - –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ \n\
                        <:locker1:1020971036252053524> - –∑–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É \n\
                        <:pencil1:1020971043856330782> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã \n\
                        <:eye1:1020971035014746162> - —Å–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É \n\
                        <:door1:1020971033756450866> - –≤—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã \n\
                        <:microphone1:1020971039141920819> - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å/–≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å',
                                    color=self.COLOR)
            await chn.send(embed=emb,
                        components=[
                            [
                                       Button(emoji=await stb_gld.fetch_emoji(1020971032309403758)),
                                       Button(emoji=await stb_gld.fetch_emoji(1020971040416993280)),
                                       Button(emoji=await stb_gld.fetch_emoji(1020971037741043713)),
                                       Button(emoji=await stb_gld.fetch_emoji(1020971036252053524))
                                   ],
                                   [
                                       Button(emoji=await stb_gld.fetch_emoji(1020971043856330782)),
                                       Button(emoji=await stb_gld.fetch_emoji(1020971035014746162)),
                                       Button(emoji=await stb_gld.fetch_emoji(1020971033756450866)),
                                       Button(emoji=await stb_gld.fetch_emoji(1020971039141920819))
                                   ]
                        ]
                        )
            self.data[str(ctx.id)]['selfRoom'] = {"ct": str(ct.id), "ctp": str(ctp.id), "vc": str(vcch.id), "tc": str(chn.id)}
            await chlen_krokodila.send(embed=discord.Embed(title='***–£—Å–ø–µ—à–Ω–æ***',
            description='–ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç —Å–æ–∑–¥–∞–Ω',
            color=self.COLOR))
            with open(f'{BD}users.json', 'w') as file:
                json.dump(self.data, file, indent=4)

    async def prefix(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º –≤ hex', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        with open(f'{BD}users.json', 'w') as file:
            data[str(self.interaction.guild.id)]['PREFIX'] = ms.content
            json.dump(data, file, indent=4)
        await ms.delete()

    async def selftitle(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.arg,
            color=self.COLOR
        )
        emb.add_field(name='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º –≤ hex', value='—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1')
        await self.interaction.message.edit(embed=emb)

        ms: discord.Message = await self.bot.wait_for('message', check=self.check.check)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        with open(f'{BD}users.json', 'w') as file:
            data[str(self.interaction.guild.id)]['SelfTitle'] = ms.content
            json.dump(data, file, indent=4)
        await ms.delete()

    async def join_roles(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.old_emb.description,
            color=self.old_emb.color
        )
        emb.add_field(name=f'–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–¥–æ–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
                      value=f'—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {len(self.serverRoles)}')

        await self.interaction.message.edit(components=[
            Select(
                placeholder=f'–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–¥–æ–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
                max_values=len(self.serverRoles[0]),
                min_values=0,
                options=[SelectOption(label=i.name, value=str(i.id)) for i in self.serverRoles[0]]
            ),
            [
                Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
            ],
            [
                Button(label='<---'),
                Button(label='OK'),
                Button(label='--->')
            ]
        ])

    async def info_clen(self):
        with open('glb_vote.json', 'r') as file:
            vt_data = json.load(file)

        if not (str(self.interaction.guild.id) in [k for k in vt_data.keys()]):

            ct = await self.interaction.guild.create_category(name='—Å—Å—Å—Å—Å—Å—Å', position=1)
            chn = await self.interaction.guild.create_text_channel(name=f'–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç wave', category=ct)
            chn1 = await self.interaction.guild.create_text_channel(name=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç wave', category=ct)

            vt_data.update({
                self.interaction.guild.id: {
                    'vote_id': chn.id,
                    'info_id': chn1.id
                }
            })
        else:
            await self.interaction.guild.get_channel(vt_data[str(self.interaction.guild.id)]['vote_id']).category.delete()
            await self.interaction.guild.get_channel(vt_data[str(self.interaction.guild.id)]['vote_id']).delete()
            await self.interaction.guild.get_channel(vt_data[str(self.interaction.guild.id)]['info_id']).delete()
            del vt_data[str(self.interaction.guild.id)]

        with open('glb_vote.json', 'w') as file:
            json.dump(vt_data, file, indent=4)


class SecSetForBTST():
    def __init__(self, bot, interaction, old_emb):
        self.bot = bot
        self.interaction: discord_components.Interaction = interaction
        self.old_emb = old_emb
        self.check = CheckMesBTST(interaction)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)

        self.data = data
        self.roles = data[str(interaction.guild.id)]['JoinRoles']
        self.COLOR = int(data[str(interaction.guild.id)]['COLOR'], 16)
        self.Classes = data[str(interaction.guild.id)]['ROLES']
        self.chlens = []
        self.serverRoles = []

        for i in range(0, len(interaction.guild.roles),
                       24):
            self.serverRoles.append(interaction.guild.roles[
                                    i:i + 24])

        for i in range(0, len([chlen for chlen in interaction.guild.text_channels]),
                       24):
            self.chlens.append([chlen for chlen in interaction.guild.text_channels][
                               i:i + 24])


    async def rolecass_choice(self):
        emb = discord.Embed(
            title=self.old_emb.title,
            description=self.old_emb.description,
            color=self.old_emb.color
        )
        emb.add_field(name=f'–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å {self.interaction.values[0]}',
                      value=f'—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {len(self.serverRoles)}')
        await self.interaction.message.edit(embed=emb,
           components=[
               Select(
                   placeholder=f'–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å *{self.interaction.values[0]}',
                   max_values=len(self.serverRoles[0]),
                   min_values=0,
                   options=[SelectOption(label=i.name, value=i.id) for i in
                            self.serverRoles[0]]
               ),
               [
                   Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                   Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                   Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
               ],
               [
                   Button(label='<---'),
                   Button(label='OK'),
                   Button(label='--->')
               ]
           ])

    async def role_choice(self):
        self.data[str(self.interaction.author.guild.id)]['ROLES'][self.interaction.component.placeholder.split('*')[1]][
            0] = self.interaction.values
        self.data[str(self.interaction.author.guild.id)]['ROLES'][self.interaction.component.placeholder.split('*')[1]][1] = [0 for
                                                                                                               i in
                                                                                                               self.interaction.values]
        await self.interaction.send(embed=discord.Embed(
            title=f'–†–æ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã',
            color=self.COLOR
        ))

        with open(f'{BD}users.json', 'w') as file:
            json.dump(self.data, file, indent=4)

    async def admin_clen(self):
        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        data[str(self.interaction.guild.id)]['idAdminchennel'] = self.interaction.values[0]
        with open(f'{BD}users.json', 'w') as file:
            json.dump(data, file, indent=4)
        await self.interaction.send(embed=discord.Embed(
            title="–£—Å–ø–µ—à–Ω–æ",
            description=f"*–ö–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {self.interaction.values[0]}*",
        ))

    async def join_roles(self):
        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)
        data[str(self.interaction.guild.id)]['JoinRoles'] = self.interaction.values
        await self.interaction.send('—Ä–æ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã')
        with open(f'{BD}users.json', 'w') as file:
            json.dump(data, file, indent=4)


class ScrollSet():
    def __init__(self, bot, interaction, old_emb):
        self.bot = bot
        self.interaction: discord_components.Interaction = interaction
        self.old_emb = old_emb
        self.check = CheckMesBTST(interaction)

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)

        self.data = data
        self.roles = data[str(interaction.guild.id)]['JoinRoles']
        self.COLOR = int(data[str(interaction.guild.id)]['COLOR'], 16)
        self.Classes = data[str(interaction.guild.id)]['ROLES']
        self.chlens = []
        self.serverRoles = []

        for i in range(0, len(interaction.guild.roles),
                       24):
            self.serverRoles.append(interaction.guild.roles[
                                    i:i + 24])

        for i in range(0, len([chlen for chlen in interaction.guild.text_channels]),
                       24):
            self.chlens.append([chlen for chlen in interaction.guild.text_channels][
                               i:i + 24])


    async def scroll_right(self):
        if self.interaction.message.embeds[0].fields[0].name\
                .startswith('–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å')\
            and int(self.interaction.message.embeds[0].fields[0].value.split()[1]) < len(self.serverRoles):
            emb = discord.Embed(
                title=self.old_emb.title,
                description=self.old_emb.description,
                color=self.old_emb.color
            )

            emb.add_field(name=self.interaction.message.embeds[0].fields[0].name,
                          value=f'—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {int(self.interaction.message.embeds[0].fields[0].value.split()[1]) + 1 if int(self.interaction.message.embeds[0].fields[0].value.split()[1]) < len(self.serverRoles) else self.interaction.message.embeds[0].fields[0].value.split()[1]} –∏–∑ {str(len(self.serverRoles))}')

            await self.interaction.message.edit(embed=emb,
                components=[
                    Select(
                        placeholder=self.interaction.message.embeds[0].fields[0].name,
                        max_values=len(self.serverRoles[int(self.interaction.message.embeds[0].fields[0].value.split()[1])]),
                        min_values=0,
                        options=[SelectOption(label=i.name, value=i.id) for i in
                                 self.serverRoles[int(self.interaction.message.embeds[0].fields[0].value.split()[1])]]
                    ),
                    [
                        Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                        Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                        Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
                    ],
                    [
                        Button(label='<---'),
                        Button(label='OK'),
                        Button(label='--->')
                    ]
                ])

        elif self.interaction.message.embeds[0].fields[0].name\
                .startswith('–≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')\
                    and int(self.interaction.message.embeds[0].fields[0].value.split()[1]) < len(self.serverRoles):

            emb = discord.Embed(
                title=self.old_emb.title,
                description=self.old_emb.description,
                color=self.old_emb.color
            )
            emb.add_field(name=self.interaction.message.embeds[0].fields[0].name,
                          value=f'—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {int(self.interaction.message.embeds[0].fields[0].value.split()[1]) + 1 if int(self.interaction.message.embeds[0].fields[0].value.split()[1]) < len(self.chlens) else self.interaction.message.embeds[0].fields[0].value.split()[1]} –∏–∑ {str(len(self.chlens))}')


            await self.interaction.message.edit(embed=emb, components=[
                Select(
                    placeholder='–≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                    options=[SelectOption(label=i.name, value=i.id) for i in
                                 self.chlens[int(self.interaction.message.embeds[0].fields[0].value.split()[1])]]
                ),
                [
                    Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                    Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                    Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
                ],
                [
                    Button(label='<---'),
                    Button(label='OK'),
                    Button(label='--->')
                ]
            ])
            await self.interaction.edit_origin()

    async def scroll_left(self):
        if self.interaction.message.embeds[0].fields[0].name \
                .startswith('–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å') \
                and int(self.interaction.message.embeds[0].fields[0].value.split()[1]) > 1:
            emb = discord.Embed(
                title=self.old_emb.title,
                description=self.old_emb.description,
                color=self.old_emb.color
            )

            emb.add_field(name=self.interaction.message.embeds[0].fields[0].name,
                          value=f'—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {int(self.interaction.message.embeds[0].fields[0].value.split()[1]) - 1} –∏–∑ {str(len(self.serverRoles))}')

            await self.interaction.message.edit(embed=emb,
                    components=[
                        Select(
                            placeholder=self.interaction.message.embeds[0].fields[0].name,
                            max_values=len(self.serverRoles[int(
                                self.interaction.message.embeds[0].fields[0].value.split()[
                                    1])-2]),
                            min_values=0,
                            options=[SelectOption(label=i.name, value=i.id) for i in
                                     self.serverRoles[int(
                                         self.interaction.message.embeds[0].fields[
                                             0].value.split()[1])-2]]
                        ),
                        [
                            Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                            Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                            Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
                        ],
                        [
                            Button(label='<---'),
                            Button(label='OK'),
                            Button(label='--->')
                        ]
                    ])

        elif self.interaction.message.embeds[0].fields[0].name\
                .startswith('–≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')\
                    and int(self.interaction.message.embeds[0].fields[0].value.split()[1]) > 1:
                emb = discord.Embed(
                title=self.old_emb.title,
                description=self.old_emb.description,
                color=self.old_emb.color
                )

                emb.add_field(name=self.interaction.message.embeds[0].fields[0].name,
                            value=f'—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {int(self.interaction.message.embeds[0].fields[0].value.split()[1]) - 1} –∏–∑ {str(len(self.chlens))}')


                await self.interaction.message.edit(embed=emb, components=[
                    Select(
                        placeholder='–≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                        options=[SelectOption(label=i.name, value=i.id) for i in
                                     self.chlens[int(
                                         self.interaction.message.embeds[0].fields[
                                             0].value.split()[1])-2]]
                    ),
                    [
                        Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                        Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                        Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
                    ],
                    [
                        Button(label='<---'),
                        Button(label='OK'),
                        Button(label='--->')
                    ]
                ])
                await self.interaction.edit_origin()

class SettingsPanel():
    def __init__(self, bot, interaction):
        self.bot = bot
        self.interaction: discord_components.Interaction = interaction

        with open(f'{BD}users.json', 'r') as file:
            data = json.load(file)

        self.COLOR = int(data[str(interaction.guild.id)]['COLOR'], 16)

    settings_for_btst = {
        '–º–æ–¥–µ—Ä–∞—Ü–∏—è': {
            '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏': '–≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –±–æ—Ç',
            '–¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å —Ä–æ–ª–µ–π': '–¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å —Ä–æ–ª–µ–π',
            '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É–¥–∏—Ç': '—ç—Ç–æ–π —à—Ç—É–∫–∏ –Ω–µ—Ç',
            '–∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞': '–∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            '–∫–æ–ª-–≤–æ –∫–∞–ø—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–ø—Å–æ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è',
            '–∫–æ–ª-–≤–æ –≤–∞—Ä–Ω–æ–≤ –¥–ª—è –±–∞–Ω–∞': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ –±–∞–Ω–∞',
            '–¥–æ–±–∞–≤–∏—Ç—å –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ': '–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            '–ø—Ä–µ—Ñ–∏–∫—Å': '–≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±–æ—Ç',
            '—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–µ–π': '—Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏ (—É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Ä–∞–∑–Ω—ã–π)',
            '—É–±—Ä–∞—Ç—å –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ': '—É–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
        },
        '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞': {
            '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç': '—Ü–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞',
            '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç –æ—à–∏–±–æ–∫': '—Ü–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ',
            '–º—É–∑—ã–∫–∞': '—Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –º—É–∑–∞–∫–∏',
            '—Å–æ–∑–¥–∞—Ç—å "—Å–≤–æ–∏ –∫–æ–º–Ω–∞—Ç—ã"': '-',
            '–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–∞—Ü–∏–µ–π': '–∫–∞–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç WaveBot',
            '—Ä–æ–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤': '–≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –ª—é–¥—è–º –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',

        },
        '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞': {}
    }

    async def btst_set_def(self, f=0):
        preference_set_for_best = ['–∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç', '–ø—Ä–µ—Ñ–∏–∫—Å']

        emb = discord.Embed(
            title='‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï*Wave Settings*‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï',
            description='.',
            color=self.COLOR
        )
        emb.add_field(name='—ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WaveBot',
                      value='–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')

        comp = [
            Select(placeholder='—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', options=[SelectOption(label=i, value=i) for i in preference_set_for_best], max_values=1),
            [
                Button(label='–º–æ–¥–µ—Ä–∞—Ü–∏—è'),
                Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞'),
                Button(label='–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞')
            ],
            [
                Button(label='<---'),
                Button(label='OK'),
                Button(label='--->')
            ]]

        if f:
            await self.interaction.send(embed=emb, components=comp)
        else:
            await self.interaction.message.edit(embed=emb, components=comp)

    async def tabs_choice(self):
        keys = []
        items = []

        for key in SettingsPanel.settings_for_btst[f'{self.interaction.component.label}']:
            keys.append(key)
            items.append(SettingsPanel.settings_for_btst[f'{self.interaction.component.label}'][key])

        emb = discord.Embed(
            title=self.interaction.message.embeds[0].title,
            description=f'**{self.interaction.component.label}**',
            color=self.COLOR
        )
        emb.add_field(name=f'{keys[0]}', value=f'{items[0]}')
        emb.add_field(name='.', value='**' + "\n".join(keys[1:]) + '**', inline=False)
        await self.interaction.message.edit(embed=emb, components=self.interaction.message.components)

    async def settings_choice_right(self):
        old_emb: discord.Embed = self.interaction.message.embeds[0].description.replace('*', '')

        keys = []
        keys.append(self.interaction.message.embeds[0].fields[0].name)
        keys.extend(self.interaction.message.embeds[0].fields[1].value.replace('.', '').replace('*', '').split('\n'))

        keys.append(keys.pop(0))

        emb = discord.Embed(
            title=self.interaction.message.embeds[0].title,
            description=f'**{old_emb}**',
            color=self.COLOR
        )
        emb.add_field(name=f'{keys[0]}', value=f'{SettingsPanel.settings_for_btst[old_emb][keys[0]]}')
        emb.add_field(name='.', value='**' + "\n".join(keys[1:]) + '**', inline=False)
        await self.interaction.message.edit(embed=emb)

    async def settings_choice_left(self):
        old_emb: discord.Embed = self.interaction.message.embeds[0].description.replace('*', '')

        keys = []
        keys.append(self.interaction.message.embeds[0].fields[0].name)
        keys.extend(self.interaction.message.embeds[0].fields[1].value.replace('.', '').replace('*', '').split('\n'))

        keys.insert(0, keys.pop(-1))
        emb = discord.Embed(
            title=self.interaction.message.embeds[0].title,
            description=f'**{old_emb}**',
            color=self.COLOR
        )
        emb.add_field(name=f'{keys[0]}', value=f'{SettingsPanel.settings_for_btst[old_emb][keys[0]]}')
        emb.add_field(name='.', value='**' + "\n".join(keys[1:]) + '**', inline=False)
        await self.interaction.message.edit(embed=emb)

