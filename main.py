#=============================================================================================–∏–º–ø–æ—Ä—Ç—ã
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!       --> token —Å—Ç—ë–ø—ã <---             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!      #–Ω–∞—Ö—É—è?       #–Ω—É–∂–Ω–æ –±—ã–ª–æ!     #–Ω–∞—Ö—É—è?    #—á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω –ø–æ–º–µ–Ω—è—Ç—å!5
import multiprocessing
from discord_components import SelectOption as Sel
import discord_components
from discord.ext import commands
from dotenv import load_dotenv, find_dotenv
import interactions
from discord_components import ComponentsBot, Button, Select
from pydoc import cli
import discord
import json
import os
import asyncio
from BTSET import bdpy, embpy
from interactions import TextInput, Modal, TextStyleType, SelectMenu, SelectOption, error
import re


load_dotenv(find_dotenv())

#=======================================================================================================================
intents=discord.Intents.all()
def get_prefix(bot, message):
    with open('users.json', 'r') as file:
        data = json.load(file)
    try:
        prefix = data[str(message.guild.id)]['PREFIX']
    except AttributeError:
        prefix = '~'
    return prefix
client = interactions.Client(token=os.getenv('TOKEN'))
bot =ComponentsBot(command_prefix = get_prefix, intents=intents)
bot.remove_command('help')
#=======================================================================================================================

#=======================================================================================================================
@bot.event
async def on_ready():
    bot.load_extension('loaderpy')
    bot.load_extension('JSONwriter')
    # client.load('module.rate.score')
    # client.reload('module.rate.score')
    client.load('module.voice.vcbot')
    client.reload('module.voice.vcbot')
    bot.load_extension('system.while')
    
    
    print(f'{bot.user.name} connected')


    await bot.change_presence(activity=discord.Game('Portal 2'))
#=======================================================================================================================

#=======================================================================================================================
@bot.command()
async def a(ctx: commands.Context):
    # client.load('module.moderation.warns')
    await ctx.send(embed=embpy(ctx, comp='s', des=f'—Ö—É–π'))

#===================================================================================================
# @client.command(
#     name='settigs',
#     description='stgngs',
# )
# async def btst_start(ctx):
#     settings_names = ['–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏', '–¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å —Ä–æ–ª–µ–π', '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç', '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç –æ—à–∏–±–æ–∫',
#                       '–∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', '–∫–æ–ª-–≤–æ –∫–∞–ø—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', '–∫–æ–ª-–≤–æ –≤–∞—Ä–Ω–æ–≤ –¥–ª—è –±–∞–Ω–∞', '–¥–æ–±–∞–≤–∏—Ç—å –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ', '–ø—Ä–µ—Ñ–∏–∫—Å', '—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–µ–π',
#                       '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä', '—Å–ø–∏—Å–æ–∫ join —Ä–æ–ª–µ–π', '—É–±—Ä–∞—Ç—å –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ',
#                       '—Å–æ–∑–¥–∞—Ç—å "—Å–≤–æ–∏ –∫–æ–º–Ω–∞—Ç—ã"', '–º—É–∑—ã–∫–∞', '–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–∞—Ü–∏–µ–π']

#     await ctx.send(components=SelectMenu(
#         custom_id='btst1',
#         options=[SelectOption(label=i, value=i) for i in settings_names],
#         placeholder='–≤—ã–±–µ—Ä–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
#         max_values=1,
#         min_values=1
#     ))

# @client.component('btst1')
# async def sel_opt(interaction: interactions.ComponentContext, int_val):
#     gld = await interaction.get_guild()
#     channels = await gld.get_all_channels()

#     with open('users.json', 'r') as file:
#         data = json.load(file)
#         roles = data[str(interaction.guild_id)]['JoinRoles']
#         COLOR = int(data[str(interaction.guild_id)]['COLOR'], 16)
#         Classes = data[str(interaction.guild_id)]['ROLES']

#         serverRoles = []
#         for i in range(0, len(gld.roles),
#                        24):  # –ø–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –∫–æ–º–µ–Ω—Ç !!!!!!!!!!!!!!!!!!!!!!!!! –Ω—É–∂–Ω–æ –ø—Ä–∏ —Å–ª—É—á–∞–∏ –æ—à–∏–±–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 25!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#             serverRoles.append(gld.roles[
#                                i:i + 24])  # –≤—Ç–æ—Ä–æ–π –≤–∞–∂–Ω—ã–π –∫–æ–º–µ–Ω—Ç !!!!!!!!!!!!!!!!!!!!!!!!! –Ω—É–∂–Ω–æ –ø—Ä–∏ —Å–ª—É—á–∞–∏ –æ—à–∏–±–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 25!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#         chlens = []
#         for i in range(0, len([chlen for chlen in channels if str(chlen.type) == 'ChannelType.GUILD_TEXT']),
#                        24):  # –ø–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –∫–æ–º–µ–Ω—Ç !!!!!!!!!!!!!!!!!!!!!!!!! –Ω—É–∂–Ω–æ –ø—Ä–∏ —Å–ª—É—á–∞–∏ –æ—à–∏–±–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 25!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#             chlens.append([chlen for chlen in channels if str(chlen.type) == 'ChannelType.GUILD_TEXT'][
#                           i:i + 24])  # –ø–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –∫–æ–º–µ–Ω—Ç !!!!!!!!!!!!!!!!!!!!!!!!! –Ω—É–∂–Ω–æ –ø—Ä–∏ —Å–ª—É—á–∞–∏ –æ—à–∏–±–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 25!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#     for arg in int_val:
#         if arg == '–º—É–∑—ã–∫–∞':
#             ctx: discord.Guild = [i for i in bot.guilds if i.id == interaction.guild_id][0]
#             chlen_dinozavra = [i for i in ctx.text_channels if i.id == interaction.channel_id][0]
#             if [i for i in ctx.categories if i.name == 'music']:
#                 await interaction.send('—É—Å–ø–µ—à–Ω–æ', ephemeral=True)
#                 for category in ctx.categories:
#                     [await chnl.delete() for chnl in category.channels if category.name == 'music']
#                 [await i.delete() for i in ctx.categories if i.name == 'music']
#             else:

#                 with open('music.json', 'r') as file:
#                     data_mus: dict = json.load(file)
#                 if not(str(ctx.id) in [i for i in data_mus.keys()]):
#                     data_mus.update(
#                         {
#                             ctx.id: {
#                                 'songs': [],
#                                 'pl_id': None,
#                                 'chl_id': None
#                             }
#                         }
#                     )

#                 with open('music.json', 'w') as file:
#                     json.dump(data_mus, file, indent=4)

#                 await interaction.send('—É—Å–ø–µ—à–Ω–æ', ephemeral=True)
#                 ctg = await ctx.create_category(name='music')
#                 txt_cnlen = await ctg.create_text_channel(name='–≤–µ–ª–∏–∫–∏–π –¥–æ–Ω —è–≥–æ–Ω')
#                 vc_clen = await ctg.create_voice_channel(name='music')
#                 embd = discord.Embed(
#                     title='***                               wave player***',
#                     description=f'=================================',
#                     colour=0x00FFFF
#                 )
#                 embd.add_field(name='—Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:', value='–Ω–∏—á–µ–≥–æ')

#                 comp = [
#                     [
#                         Button(emoji='‚óÄ', style=2),
#                         Button(emoji='‚èØ', style=2),
#                         Button(emoji='‚ñ∂', style=2),
#                         Button(emoji='üîÄ', style=2)
#                     ],
#                     [
#                         Button(emoji='üîÅ', style=2),
#                         Button(emoji='üîä', style=2),
#                         Button(emoji='üîà', style=2),
#                         Button(emoji='üîá', style=2)
#                     ]
#                 ]

#                 msc_player = await txt_cnlen.send(embed=embd, components=comp)

#                 await vc_clen.connect()


#                 with open('music.json', 'r') as file:
#                     data_mus = json.load(file)
#                     data_mus[str(ctx.id)]['pl_id'] = msc_player.id
#                     data_mus[str(ctx.id)]['chl_id'] = txt_cnlen.id
#                 with open('music.json', 'w') as file:
#                     json.dump(data_mus, file, indent=4)

#         if arg == '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏':
#             ctxx = [i for i in bot.get_all_channels() if i.id == interaction.channel_id][0]
#             await ctxx.send(embed=discord.Embed(
#                 title='–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏',
#                 color=COLOR
#             ),
#             components=[
#                 Select(
#                     placeholder='–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏',
#                     max_values=len(data[str(interaction.guild_id)]['ROLES']),
#                     min_values=1,
#                     options=[Sel(label=str(i), value=str(i)) for i in [k for k in Classes.keys()]]
#                 )
#             ]
#             )

#         if arg == '–¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å —Ä–æ–ª–µ–π':
#             await interaction.popup(Modal(
#                 custom_id='Add_class',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞'
#                     )
#                 ]
#             ))
#         elif arg == '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç':
#             await interaction.popup(Modal(
#                 custom_id='Color',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ hex –±–µ–∑ #',
#                         min_length=6,
#                         max_length=6
#                     )
#                 ]
#             ))
#         elif arg == '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç –æ—à–∏–±–æ–∫':
#             await interaction.popup(Modal(
#                 custom_id='ErColor',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ hex –±–µ–∑ #',
#                         min_length=6,
#                         max_length=6
#                     )
#                 ]
#             ))
#         elif arg == '–∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
#             for chlen_begemota in chlens:
#                 SM = SelectMenu(
#                     custom_id='IDA1',
#                     options=[
#                         SelectOption(label=i.name, value=str(i.id)) for i in chlen_begemota
#                     ],
#                     placeholder='–≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
#                 )
#                 await interaction.send(components=SM)
#         elif arg == 'ncaps':
#             await interaction.popup(Modal(
#                 custom_id='Ncaps',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–∞–ø—Å–æ–≤'
#                     )
#                 ]
#             ))
#         elif arg == 'nwarns':
#             await interaction.popup(Modal(
#                 custom_id='Nwarns',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≤–∞—Ä–Ω–æ–≤'
#                     )
#                 ]
#             ))
#         elif arg == '–¥–æ–±–∞–≤–∏—Ç—å –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ':
#             await interaction.popup(Modal(
#                 custom_id='Add_badword',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ'
#                     )
#                 ]
#             ))
#         elif arg == '—É–±—Ä–∞—Ç—å –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ':
#             await interaction.popup(Modal(
#                 custom_id='Remove_badword',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ'
#                     )
#                 ]
#             ))
#         elif arg == '—Å–æ–∑–¥–∞—Ç—å "—Å–≤–æ–∏ –∫–æ–º–Ω–∞—Ç—ã"':

#             ctx = [i for i in bot.guilds if i.id == interaction.guild_id][0]
#             chlen_krokodila = [i for i in ctx.text_channels if i.id == interaction.channel_id][0]

#             if data[str(ctx.id)]['selfRoom'] != '0':
#                 for category in ctx.categories:
#                     [await chnl.delete() for chnl in category.channels if str(category.id) == data[str(ctx.id)]['selfRoom']["ct"]]
#                 [await i.delete() for i in ctx.categories if str(i.id) == data[str(ctx.id)]['selfRoom']["ct"] or str(i.id) == data[str(ctx.id)]['selfRoom']["ctp"]]
#                 data[str(ctx.id)]['selfRoom'] = '0'
#                 await chlen_krokodila.send(embed=discord.Embed(title='***–£—Å–ø–µ—à–Ω–æ***',
#                 description='–ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç —É–¥–∞–ª—ë–Ω',
#                 color=COLOR))
#             else:
                
#                 ct = await ctx.create_category(name='–°–°–ö', position=1)
#                 vcch = await ctx.create_voice_channel(name=f'–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É', category=ct)
#                 chn = await ctx.create_text_channel(name=f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–Ω–∞—Ç—ã', category=ct)
#                 ctp = await ctx.create_category(name='–°–≤–æ–∏ —Ä—É–º—ã', position=2)
#                 stb_gld: discord.Guild = bot.get_guild(id=981511419042361344)
#                 emb = discord.Embed(title='***‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏***',
#                                         description=f'<:corona1:1020971032309403758> - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã \n\
#                             <:notebook1:1020971040416993280> - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å/–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ \n\
#                             <:meet1:1020971037741043713> - –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ \n\
#                             <:locker1:1020971036252053524> - –∑–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É \n\
#                             <:pencil1:1020971043856330782> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã \n\
#                             <:eye1:1020971035014746162> - —Å–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É \n\
#                             <:door1:1020971033756450866> - –≤—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã \n\
#                             <:microphone1:1020971039141920819> - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å/–≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å',
#                                         color=COLOR)
#                 await chn.send(embed=emb,
#                             components=[
#                                 [
#                                            Button(emoji=await stb_gld.fetch_emoji(1020971032309403758)),
#                                            Button(emoji=await stb_gld.fetch_emoji(1020971040416993280)),
#                                            Button(emoji=await stb_gld.fetch_emoji(1020971037741043713)),
#                                            Button(emoji=await stb_gld.fetch_emoji(1020971036252053524))
#                                        ],
#                                        [
#                                            Button(emoji=await stb_gld.fetch_emoji(1020971043856330782)),
#                                            Button(emoji=await stb_gld.fetch_emoji(1020971035014746162)),
#                                            Button(emoji=await stb_gld.fetch_emoji(1020971033756450866)),
#                                            Button(emoji=await stb_gld.fetch_emoji(1020971039141920819))
#                                        ]
#                             ]
#                             )
#                 data[str(ctx.id)]['selfRoom'] = {"ct": str(ct.id), "ctp": str(ctp.id), "vc": str(vcch.id), "tc": str(chn.id)}
#                 await chlen_krokodila.send(embed=discord.Embed(title='***–£—Å–ø–µ—à–Ω–æ***',
#                 description='–ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç —Å–æ–∑–¥–∞–Ω',
#                 color=COLOR))
#                 with open('users.json', 'w') as file:
#                     json.dump(data, file, indent=4)

#         elif arg == '–ø—Ä–µ—Ñ–∏–∫—Å':
#             await interaction.popup(Modal(
#                 custom_id='Prefix',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ prefix'
#                     )
#                 ]
#             ))
#         elif arg == '–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–µ–π':
#             await interaction.popup(Modal(
#                 custom_id='Selftitle',
#                 title=' ',
#                 components=[
#                     TextInput(
#                         style=TextStyleType.SHORT,
#                         custom_id='qwertyuiop',
#                         label='–í–≤–µ–¥–∏—Ç–µ selftitle'
#                     )
#                 ]
#             ))
#         elif arg == '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä':
#             for rls in serverRoles:
#                 await interaction.send(components=SelectMenu(
#                     custom_id='jnrl1',
#                     placeholder=f'–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–¥–æ–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
#                     max_values=len(rls),
#                     min_values=0,
#                     options=[SelectOption(label=i.name, value=str(i.id)) for i in rls]
#                 ))
#         elif arg == '—Å–ø–∏—Å–æ–∫ join —Ä–æ–ª–µ–π':
#             emb = discord.Embed(title=f'–£—Å–ø–µ—à–Ω–æ',
#                                 description=f'*–†–æ–ª–∏:*',
#                                 color=COLOR)
#             n = 0
#             while len(roles) != n:
#                 emb.add_field(name=f'{(await interaction.guild.get_role(int(roles[n]))).name}', value=f'{roles[n]}',
#                               inline=True)
#                 n += 1

#             await [i for i in bot.get_all_channels() if i.id == interaction.channel_id][0].send(embed=emb)

#         elif arg == 'classes':
#             pass
#             '''with open('users.json', 'r') as file:
#                 data = json.load(file)
#                 Classes = data[str(interaction.guild_id)]['ROLES']
#             emb = discord.Embed(title=f'–£—Å–ø–µ—à–Ω–æ',
#                 escription=f'*–†–æ–ª–∏:*',
#                 color=COLOR)
#             n = 0
#             while len(Classes) != n:
#                 with open('users.json', 'r') as file:
#                     ClassesRoles = data[str(interaction.guild_id)]['ROLES'][str(Classes[n])][0]
#                 emb.add_field(name=f'{str(Classes[n])}', value=''.join(ClassesRoles), inline=True)
#                 n += 1
#             await [i for i in bot.get_all_channels() if i.id == interaction.channel_id][0].send(embed=emb)'''
#         elif arg == 'add_IgnoreChannel':
#             pass
#         elif arg == 'add_IgnoreRole':
#             pass
#         elif arg == 'IgnoreRoles':
#             pass
#         elif arg == '–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–∞—Ü–∏–µ–π': #–ø–µ—Ä–µ–∏–º–æ–≤–∞—Ç—å
#             ctx = [i for i in bot.guilds if i.id == interaction.guild_id][0]

#             with open('glb_vote.json', 'r') as file:
#                 vt_data = json.load(file)

#             if not(str(ctx.id) in [k for k in vt_data.keys()]):

#                 ct = await ctx.create_category(name='—Å—Å—Å—Å—Å—Å—Å', position=1)
#                 chn = await ctx.create_text_channel(name=f'–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç wave', category=ct)
#                 chn1 = await ctx.create_text_channel(name=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç wave', category=ct)

#                 vt_data.update({
#                     ctx.id: {
#                         'vote_id': chn.id,
#                         'info_id': chn1.id
#                     }
#                 })
#             else:
#                 await ctx.get_channel(vt_data[str(ctx.id)]['vote_id']).category.delete()
#                 await ctx.get_channel(vt_data[str(ctx.id)]['vote_id']).delete()
#                 await ctx.get_channel(vt_data[str(ctx.id)]['info_id']).delete()
#                 del vt_data[str(ctx.id)]

#             with open('glb_vote.json', 'w') as file:
#                 json.dump(vt_data, file, indent=4)




#         with open('users.json', 'w') as file:
#             json.dump(data, file, indent=4)
        
            

            


# # =======================================================================================================================================   roles
# @bot.event
# async def on_select_option(interaction):
#     try:
#         with open('users.json', 'r') as file:
#             data = json.load(file)
#             COLOR = int(data[str(interaction.guild_id)]['COLOR'], 16)

#         serverRoles = []
#         for i in range(0, len(interaction.guild.roles),
#                        24):  # –ø–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –∫–æ–º–µ–Ω—Ç !!!!!!!!!!!!!!!!!!!!!!!!! –Ω—É–∂–Ω–æ –ø—Ä–∏ —Å–ª—É—á–∞–∏ –æ—à–∏–±–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 25!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#             serverRoles.append(interaction.guild.roles[
#                                i:i + 24])  # –≤—Ç–æ—Ä–æ–π –≤–∞–∂–Ω—ã–π –∫–æ–º–µ–Ω—Ç !!!!!!!!!!!!!!!!!!!!!!!!! –Ω—É–∂–Ω–æ –ø—Ä–∏ —Å–ª—É—á–∞–∏ –æ—à–∏–±–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 25!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#     except:
#         pass

#     if interaction.component.placeholder == '–£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏':
#         for i in interaction.values:
#             for rls in serverRoles:
#                 await interaction.send(embed=discord.Embed(
#                     title=f'–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å {i}',
#                     color=COLOR
#                 ),
#                 components=[
#                     Select(
#                         placeholder=f'–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å *{i}',
#                         max_values=len(rls),
#                         min_values=0,
#                         options=[Sel(label=i.name, value=i.id) for i in rls]
#                     )
#                     ]
#                 )

#     elif interaction.component.placeholder.startswith('–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å'):
#         data[str(interaction.author.guild.id)]['ROLES'][interaction.component.placeholder.split('*')[1]][0] = interaction.values
#         data[str(interaction.author.guild.id)]['ROLES'][interaction.component.placeholder.split('*')[1]][1] = [0 for i in interaction.values]
#         await interaction.send(embed=discord.Embed(
#             title=f'–†–æ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã',
#             color=COLOR
#         ))

#     with open('users.json', 'w') as file:
#         json.dump(data, file, indent=4)

#         # ==========================================================================================================================   IDA
# @client.component('IDA1')
# async def vgf(interaction, int_val):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     with open('users.json', 'w') as file:
#         data[str(interaction.guild_id)]['idAdminchennel'] = ''.join(int_val)
#         json.dump(data, file, indent=4)
#     await interaction.send('+')
#     with open('users.json', 'w') as file:
#         json.dump(data, file, indent=4)
#     await interaction.send(embeds=discord.Embed(
#         title="–£—Å–ø–µ—à–Ω–æ",
#         description=f"*–ö–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {int_val}*",
#     ), ephemeral=True)
# # =======================================================================================================================    join roles
# @client.component('jnrl1')
# async def jf(interaction, int_val):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     data[str(interaction.guild_id)]['JoinRoles'] = int_val
#     await interaction.send('—Ä–æ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã')
#     with open('users.json', 'w') as file:
#         json.dump(data, file, indent=4)
# #===============================================================================================     addclass
# @client.modal('Add_class')
# async def vvb(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     if not (shrt in data[str(ctx.guild_id)]['ROLES']):
#         with open('users.json', 'w') as file:
#             data[str(ctx.guild_id)]['ROLES'].update({shrt: [[], []]})
#             json.dump(data, file, indent=4)
#     await ctx.send(f'–ö–ª–∞—Å—Å {shrt} —Å–æ–∑–¥–∞–Ω', ephemeral=True)
# #============================================================================== color

# @client.modal('Color')
# async def bbdbkn(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     with open('users.json', 'w') as file:
#         data[str(ctx.guild_id)]['COLOR'] = '0x' + shrt
#         json.dump(data, file, indent=4)
#     await ctx.send('—É—Å–ø–µ—à–Ω–æ', ephemeral=True)

# #=========================================================================    ercolor

# @client.modal('ErColor')
# async def sgdhj(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     with open('users.json', 'w') as file:
#         data[str(ctx.guild_id)]['ErCOLOR'] = '0x' + shrt
#         json.dump(data, file, indent=4)
#     await ctx.send('—É—Å–ø–µ—à–Ω–æ', ephemeral=True)

# #======================================================================      ncaps
# @client.modal('Ncaps')
# async def opkijn(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     with open('users.json', 'w') as file:
#         data[str(ctx.guild_id)]['nCaps'] = shrt
#         json.dump(data, file, indent=4)
#     await ctx.send('–£—Å–ø–µ—à–Ω–æ', ephemeral=True)

# #=========================================================================    nwarns
# @client.modal('Nwarns')
# async def opkin(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     with open('users.json', 'w') as file:
#         data[str(ctx.guild_id)]['nWarns'] = shrt
#         json.dump(data, file, indent=4)
#     await ctx.send('–£—Å–ø–µ—à–Ω–æ', ephemeral=True)

# #========================================================================     addbadword
# @client.modal('Add_badword')
# async def opkvijn(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     with open('users.json', 'w') as file:
#         data[str(ctx.guild_id)]['BADWORDS'].append(shrt)
#         json.dump(data, file, indent=4)
#     await ctx.send(f"*–í —Å–ø–∏—Å–æ–∫ badwords –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ —Å–ª–æ–≤–æ ||{shrt}||*", ephemeral=True)


# #======================================================================    rem badword
# @client.modal('Remove_badword')
# async def opeijn(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     if shrt in data[str(ctx.guild_id)]['BADWORDS']:
#         with open('users.json', 'w') as file:
#             data[str(ctx.guild_id)]['BADWORDS'].pop(data[str(ctx.guild_id)]['BADWORDS'].index(shrt))
#             json.dump(data, file, indent=4)
#         await ctx.send(f"*–°–ª–æ–≤–æ ||{shrt}|| –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤*")
#     else:
#         await ctx.send('—Å–ª–æ–≤–∞ –Ω–µ—Ç', ephemeral=True)


# #=====================================================================    prefix
# @client.modal('Prefix')
# async def oskijn(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     with open('users.json', 'w') as file:
#         data[str(ctx.guild_id)]['PREFIX'] = shrt
#         json.dump(data, file, indent=4)
#     await ctx.send(f"*–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {shrt}*", ephemeral=True)


# #======================================================================   selftitle
# @client.modal('Selftitle')
# async def opasn(ctx, shrt):
#     with open('users.json', 'r') as file:
#         data = json.load(file)
#     with open('users.json', 'w') as file:
#         data[str(ctx.guild_id)]['SelfTitle'] = shrt
#         json.dump(data, file, indent=4)
#     await ctx.send(f"*–¢–µ–∫—Å—Ç –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {shrt}*", ephemeral=True)


#=======================================================================================================================
# @bot.event
# async def on_command_error(ctx, error):
#     with open('users.json', 'r') as file:
#         dataServerID = json.load(file)
#         ErCOLOR = int(dataServerID[str(ctx.author.guild.id)]['ErCOLOR'], 16)
#         pref = str(dataServerID[str(ctx.author.guild.id)]['PREFIX'])
    # if isinstance(error, commands.errors.CommandNotFound):
    #     print(error)
    #     found = re.findall(r'Command \s*"([^\"]*)"', str(error))
    #     await ctx.send(embed=discord.Embed(
    #         title="–û—à–∏–±–∫–∞",
    #         description=f"*–ö–æ–º–∞–Ω–¥—ã `{''.join(found)}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*",
    #         color = ErCOLOR
    #     ))
    # elif isinstance(error, commands.errors.MemberNotFound):
    #     found = re.findall(r'Member \s*"([^\"]*)"', str(error))
    #     await ctx.send(embed=discord.Embed(
    #         title="–û—à–∏–±–∫–∞",
    #         description=f"*–£—á–∞—Å—Ç–Ω–∏–∫ `{''.join(found)}` –Ω–µ –Ω–∞–π–¥–µ–Ω*",
    #         color = ErCOLOR
    #     ))
    # elif isinstance(error, commands.errors.CommandInvokeError):
    #     pass

#=======================================================================================================================


# @bot.event
# async def on_error(ctx, err):
#     print('–æ—à–∏–±–∫–∞', ':', ctx)
#     print(err)


def main():

    loop = asyncio.get_event_loop()

    task2 = loop.create_task(bot.start(os.getenv('TOKEN')))
    task1 = loop.create_task(client._ready())

    gathered = asyncio.gather(task1, task2, loop=loop)
    loop.run_until_complete(gathered)


if __name__ == '__main__':
    main()
